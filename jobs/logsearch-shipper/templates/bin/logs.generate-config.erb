#!/var/vcap/packages/logsearch-ruby/bin/ruby

require 'digest'
require 'yaml'

realconf = {}

baseconf = []
<% [ 'logsearch.logs._builtin_defaults', 'logsearch.logs._defaults' ].each do | key | %><% if_p(key) do | yaml | %>
baseconf.push YAML.load <<ENDCONF
<%= yaml %>
ENDCONF
<% end %><% end %>

Dir.glob('/var/vcap/jobs/*/logsearch/logs.yml') do | path |
  baseconf.push YAML.load_file(path)
end

<% [ 'logsearch.logs._overrides' ].each do | key | %><% if_p(key) do | yaml | %>
baseconf.push YAML.load <<ENDCONF
<%= yaml %>
ENDCONF
<% end %><% end %>

baseconf.each do | config |
    config['files'].each do | relpath, value |
        if '/' == relpath[0]
            abspath = relpath
        else
            abspath = "/var/vcap/sys/log/#{relpath}"
        end

        if abspath.include? "*"
            allpath = Dir.glob(abspath)
        else
            allpath = [ abspath ]
        end

        allpath.each do | path |
            if nil == value
                realconf[path] = nil
            elsif not realconf.has_key?(path) or not realconf[path].nil?
                if realconf.has_key? path
                    defconf = realconf[path]
                else
                    defconf = {}
                    defconf['fields'] = {}
                end

                defconf['fields'].merge! value['fields']

                realconf[path] = defconf
            end
        end
    end
end

$stdout.puts "ModuleDir /var/vcap/packages/logsearch-nxlog/usr/lib/nxlog/modules"
$stdout.puts "CacheDir /var/vcap/data/logsearch-shipper/logs"
#$stdout.puts "Group vcap"
$stdout.puts "PidFile /var/vcap/sys/run/logsearch-shipper/logs-nxlog.pid"
$stdout.puts "LogFile /var/vcap/sys/log/logsearch-shipper/logs.nxlog.log"
#$stdout.puts "User vcap"

$stdout.puts "<Extension syslog>"
$stdout.puts "  Module xm_syslog"
$stdout.puts "</Extension>"

$stdout.puts "<Output out>"

<% hostport = p('logsearch.logs.server').split(':') %>
$stdout.puts "  Host <%= hostport[0] %>"
$stdout.puts "  Port <%= hostport[1] %>"

<% if 'tcp' == p('logsearch.logs.transport') %>
    <% if '' != p('logsearch.logs.ssl_ca_certificate', '') %>
        $stdout.puts "  Module om_ssl"
        $stdout.puts "  CAFile /var/vcap/jobs/logsearch-shipper/etc/logs.ssl-ca.crt"

        <% if_p('logsearch.logs.ssl_certificate') do %>
            $stdout.puts "  CertFile /var/vcap/jobs/logsearch-shipper/etc/logs.ssl.crt"
            $stdout.puts "  CertKeyFile /var/vcap/jobs/logsearch-shipper/etc/logs.ssl.key"
        <% end %>
    <% else %>
        $stdout.puts "  Module om_tcp"
    <% end %>

    $stdout.puts "  Exec to_syslog_ietf();"
    $stdout.puts "  OutputType LineBased"
<% elsif 'udp' == p('logsearch.logs.transport') %>
    $stdout.puts "  Module om_udp"
    $stdout.puts "  Exec to_syslog_ietf();"
    $stdout.puts "  OutputType LineBased"
<% else %>
    raise StandardError, "Invalid value for logsearch.logs.transport"
<% end %>

$stdout.puts "</Output>"

md5list = []

realconf.each do | path, value |
    if value.nil?
        next
    end

    pathid = Digest::MD5.hexdigest(path)
    md5list.push pathid

    $stdout.puts "<Input #{pathid}>"
    $stdout.puts "  Module im_file"
    $stdout.puts "  File \"#{path}\""
    $stdout.puts "  SavePos true"
    $stdout.puts "  InputType LineBased"
    $stdout.puts "  Exec $EventReceivedTime = undef;"
    $stdout.puts "  Exec $SourceModuleName = undef;"
    $stdout.puts "  Exec $SourceModuleType = undef;"
    $stdout.puts "  Exec $path = \"#{path}\";"

    fields = {}

    value['fields'].each do | field_key, field_value |
        file_template = ''
        path.match(%r"^/var/vcap/sys/log/([^/]+)/.+$") do | m |
            file_template = m[1]
        end

        if field_value.nil?
            fields[field_key] = field_value
        else
            {
                'director' => '<%= p('logsearch.logs.director') %>',
                'deployment' => '<%= spec.deployment %>',
                'index' => '<%= index %>',
                'job' => '<%= name %>',
                'file_path' => path,
                'file_template' => file_template
            }.each do | sub_key, sub_value |
                field_value = field_value.sub "{{#{sub_key}}}", sub_value
            end

            if '' != field_value
                fields[field_key] = field_value
            end
        end
    end

    fields.each do | field_key, field_value |
        if field_value.nil?
            $stdout.puts "  Exec $#{field_key} = undef;"
        else
            field_value = field_value.gsub '"', '\"'
            $stdout.puts "  Exec $#{field_key} = \"#{field_value}\";"
        end
    end

    $stdout.puts "</Input>"
end

$stdout.puts "<Route all>"
$stdout.puts "  Path #{md5list.join(', ')} => out"
$stdout.puts "</Route>"
